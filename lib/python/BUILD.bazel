# python toolchain in (intel) Mac and M1 linux are both at /usr/bin/python{2,3} so let's be
# explicit there.

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@rules_python//python:defs.bzl", "py_runtime_pair")

py_runtime(
    name = "platform_py2_runtime",
    interpreter_path = "/usr/bin/python2",
    python_version = "PY2",
)

py_runtime(
    name = "platform_py3_runtime",
    interpreter_path = "/usr/bin/python3",
    python_version = "PY3",
)

py_runtime_pair(
    name = "platform_py_runtime_pair",
    py2_runtime = ":platform_py2_runtime",
    py3_runtime = ":platform_py3_runtime",
)

toolchain(
    name = "python_toolchain",
    #target_compatible_with = <...>,
    toolchain = ":platform_py_runtime_pair",
    toolchain_type = "@rules_python//python:toolchain_type",
)

# codify the process of fetching dependencies of required libs and version-locking.
genrule(
    name = "recompile_deps",
    srcs = ["requirements.txt"],
    outs = ["requirements_lock.txt"],
    cmd = """set +x; CUSTOM_COMPILE_COMMAND="bazel build //lib/python:recompile_deps" pip-compile --allow-unsafe --resolver=backtracking --output-file $@ $(SRCS)""",
    tags = ["manual"],
    visibility = ["//:__subpackages__"],  # effectively public within this repo
)

# Break the rules: write a file back to source path (Fighting with bazel)
write_file(
    name = "gen_update",
    out = "update.sh",
    content = [
        # This depends on bash, would need tweaks for Windows
        "#!/usr/bin/env bash",
        # Bazel gives us a way to access the source folder!
        "cd $BUILD_WORKSPACE_DIRECTORY",
        "cp -fv bazel-bin/lib/python/requirements_lock.txt lib/python/requirements_lock.txt",
    ],
)

sh_binary(
    name = "update_deps",
    srcs = [":gen_update"],
    data = [":recompile_deps"],
    tags = ["manual"],
)
